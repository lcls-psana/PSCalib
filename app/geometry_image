#!@PYTHON@
####!/usr/bin/env python

import sys
from time import time
import numpy as np

from pyimgalgos.GlobalUtils import print_ndarr, shape_as_3d
from PSCalib.GeometryAccess import GeometryAccess, img_from_pixel_arrays

import pyimgalgos.Graphics as gr
import pyimgalgos.GlobalGraphics as gg

SCRNAME = sys.argv[0].rsplit('/')[-1]

#----------

def argument_parser():

    import argparse
    
    d_tname    = '0'
    d_geofname = 'geo.txt'
    d_ndafname = 'nda.txt'
    d_ofname   = 'img.png'
    d_nrmspos  = 2.5
    d_nrmsneg  = 0.5
    d_segzero  = None
    d_imgwidth = 9.6
    d_imgheight= 8.9 # defined by macbook-pro 13" - soo small.

    usage = 'E.g.: %s -h # brief info about content' % SCRNAME
          #+ '\n  or: %s %s -i -e -p -S 5 # skip 5 calib-cycles and plot graphics' % (SCRNAME, d_dsname)\
          #+ '\n  or: %s %s -e -p -s --detname %s -f %s' % (SCRNAME, d_dsname, d_detname, d_prefix)
    print(usage)
    
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--tname',    type=str,   default=d_tname,    help='test name: 1,2,3,..., default: %s'%d_tname)
    parser.add_argument('-g', '--geofname',   type=str,   default=d_geofname, help='geometry constants file name, default: %s'%d_geofname)
    parser.add_argument('-a', '--ndafname', type=str,   default=d_ndafname, help='text ndarray file name, default: %s'%d_ndafname)
    parser.add_argument('-o', '--ofname',   type=str,   default=d_ofname,   help='file name for output image, default: %s'%d_ofname)
    parser.add_argument('-p', '--nrmspos',  type=float, default=d_nrmspos,  help='number of rms positive for intensity range, default: %s'%d_nrmspos)
    parser.add_argument('-n', '--nrmsneg',  type=float, default=d_nrmsneg,  help='number of rms negative for intensity range, default: %s'%d_nrmsneg)
    parser.add_argument('-i', '--segzero',  type=int,   default=d_segzero,  help='segment index to redefine intensity, default: %s'%d_segzero)
    parser.add_argument('-W', '--imgwidth', type=float, default=d_imgwidth, help='image width on screen [inch], default: %s'%d_imgwidth)
    parser.add_argument('-H', '--imgheight',type=float, default=d_imgheight,help='image height on screen [inch], default: %s'%d_imgheight)
    #parser.add_argument('-e', '--procev', default=d_procev, help='process events in loop, default: %s'%d_procev, action='store_true')
    
    args = parser.parse_args()
    print('Arguments: %s\n' % str(args))
    for k,v in vars(args).items() : print('  %12s : %s' % (k, str(v)))

    return args

#----------

def plot_image(img):
    import pyimgalgos.GlobalGraphics as gg
    ave, rms = img.mean(), img.std()
    gg.plotImageLarge(img, amp_range=(ave-1*rms, ave+2*rms))
    gg.show()

#----------
#    fig, axim, axcb = gg.fig_axes(figsize=(13,12), title='Image', dpi=80, \
#                       win_axim=(0.05,  0.03, 0.87, 0.93), \
#                       win_axcb=(0.923, 0.03, 0.02, 0.93))
#----------
#    imsh, cbar = gr.imshow_cbar(fig, axim, axcb, img, amin=None, amax=None, extent=None,\
#                 interpolation='nearest', aspect='auto', origin='upper',\
#                 orientation='horizontal', cmap='jet') 
#----------
# drawCircle(axes, xy0, radius, linewidth=1, color='w', fill=False)
# drawCenter(axes, xy0, s=10, linewidth=1, color='w')
# drawLine(axes, xarr, yarr, s=10, linewidth=1, color='w')
# drawRectangle(axes, xy, width, height, linewidth=1, color='w')
# save_fig(fig, fname='img.png', do_save=True, pbits=0o377)

#----------

def geometry_image():

    args = argument_parser()

    #tname = sys.argv[1] if len(sys.argv) > 1 else '0'
    tname = args.tname
    print(50*'_', '\nTest %s:' % tname)

    fname_geo = args.geofname
    fname_nda = args.ndafname
    ofname    = args.ofname
    nrmspos   = args.nrmspos
    nrmsneg   = args.nrmsneg
    segzero   = args.segzero
    imgheight = args.imgheight
    imgwidth  = args.imgwidth
    #sys.exit('TEST EXIT')

    #shape     = None
    segname, segind, dx, dy = None, 0, 0, 0

    if tname == '0':
      pass
    elif tname == '1':
      cdir = '/reg/d/psdm/MFX/mfx11116/calib'
      #fname_geo = '%s/%s' % (cdir, 'CsPad::CalibV1/MfxEndstation.0:Cspad.0/geometry/566-end.data')
      fname_geo = 'geo-cspad-mfx.txt'
      #fname_nda = 'nda-mfx11116-r0624-e005365-MfxEndstation-0-Cspad-0-max.txt'
      fname_nda = 'nda-mfx11116-r0625-e026505-MfxEndstation-0-Cspad-0-max.txt'
      #fname_nda = 'nda-mfx11116-r0626-e015975-MfxEndstation-0-Cspad-0-max.txt'
      #shape = (32,185,388)
      #segname, segind, dx, dy = 'CSPAD:V2', 0, -77500, 120000

    elif tname == '2':
      #fname_geo = '%s/%s' % (cdir, 'Jungfrau::CalibV1/MfxEndstation.0:Jungfrau.0/geometry/0-end.data')
      fname_geo = 'geo-jf-mfx.txt'
      fname_nda = 'nda-mfx11116-r0624-e005365-MfxEndstation-0-Jungfrau-0-max.txt'
      #fname_nda = 'nda-mfx11116-r0625-e026505-MfxEndstation-0-Jungfrau-0-max.txt'
      #fname_nda = 'nda-mfx11116-r0626-e015975-MfxEndstation-0-Jungfrau-0-max.txt'
      #shape = (2,512,1024)
      #segname, segind, dx, dy = 'JFCAMERA:V1', 0, -90*1000, -3*1000

    elif tname == '3':
      d = '/reg/g/psdm/detector/alignment/epix10ka2m/calib-xxx-epix10ka2m.1-2020-02-25'
      fname_geo = '%s/geometry-epix10ka2m-test.txt' % d
      fname_nda = '%s/nda-mfxc00118-r41-averaged.txt' % d
      #shape = (16,352,384) 

    else:
      msg = 'Not-recognized test name: %s' % tname
      sys.exit('End of test %s' % tname)

    print('fname_geo: %s' % fname_geo)
    print('fname_nda: %s' % fname_nda)

    t0_sec = time()
    geo = GeometryAccess(fname_geo, 0o377)

    if segname is not None: 
        geo.move_geo(segname, segind, dx, dy, 0) # (hor, vert, z)

    X, Y, Z = geo.get_pixel_coords() # oname=None, oindex=0, do_tilt=True)
    print('GeometryAccess time = %.6f sec' % (time()-t0_sec))
    xmin = X.min()
    xmax = X.max()
    ymin = Y.min()
    ymax = Y.max()
    print('Image xmin=%.1f xmax=%.1f ymin=%.1f ymax=%.1f'% (xmin, xmax, ymin, ymax))

    print_ndarr(X, 'X')
    print_ndarr(Y, 'Y')

    nda = np.loadtxt(fname_nda)
    iX, iY = geo.get_pixel_coord_indexes(do_tilt=True)
    print_ndarr(iX, 'iX')
    print_ndarr(iY, 'iY')
    print_ndarr(nda, 'nda')

    shape = shape_as_3d(iX.shape)
    if nda.size == 2162688: shape = (16,352,384) # epix10ka2m
    if nda.size == 4194304: shape = (8,512,1024) # jungfrau4m
    print('shape:', shape)

    iX.shape = shape
    iY.shape = shape
    nda.shape = shape

    #ave, rms = nda.mean(), nda.std()
    vmin, vmax = nda.min(), nda.max()
    med = np.median(nda)
    spr = np.median(np.abs(nda-med))
    print('median, spread:', med, spr)
 
    amin, amax = med-nrmsneg*spr, med+nrmspos*spr
    print('Image med=%.1f spr=%.1f min=%.1f max=%.1f amin=%.1f amax=%.1f'%\
          (med, spr, vmin, vmax, amin, amax))

    # replace one segment in data
    if segzero is not None:
       #segsize = nda[segzero,:].size
       segsh = nda[segzero,:].shape
       #print('XXX segsh', segsh)
       print_ndarr(segsh,'XXX segsh')
       norm = (amax-amin)/max(segsh[0],segsh[1])
       arows = np.arange(segsh[0], dtype=nda.dtype) * norm
       acols = np.arange(segsh[1], dtype=nda.dtype) * norm
       grid = np.meshgrid(acols,arows)
       #print_ndarr(grid[0],'XXX grid[0]')
       #print_ndarr(grid[1],'XXX grid[1]')
       nda[segzero,:] = 0.3*grid[0] + 0.7*grid[1] + amin # cols change color faster

    img = img_from_pixel_arrays(iX,iY,W=nda)
    print_ndarr(img, 'img')

    #plot_image(img)
    fig, axim, axcb = gg.fig_axes(figsize=(imgwidth,imgheight),\
         win_axim=(0.06, 0.03, 0.87, 0.93),\
         win_axcb=(0.923,0.03, 0.02, 0.93), dpi=80, title=fname_geo)
    imsh, cbar = gr.imshow_cbar(fig, axim, axcb, img, amin=amin, amax=amax, extent=(xmin,xmax,ymin,ymax),\
                                interpolation='nearest', aspect='auto', origin='upper',\
                                orientation='vertical', cmap='inferno') # 'inferno''Greys_r'
    xy0 = (0,0)

    #rmax = 100000
    #axim.set_xlim((-rmax,rmax))
    #axim.set_ylim((-rmax,rma))
    gg.drawCenter(axim, xy0, s=xmax/20, linewidth=1, color='w')

    for radius in np.linspace(0, 2.5*xmax, 50, endpoint=True):
        gg.drawCircle(axim, xy0, radius, linewidth=1, color='w', fill=False)

    gr.show(mode=None)
    gg.save_fig(fig, fname=ofname, do_save=True, pbits=0o377)

#----------

if __name__ == "__main__":
    if len(sys.argv)<2: sys.exit('Try command> %s -h' % SCRNAME)
    geometry_image()
    sys.exit('End of %s' % SCRNAME)
 
#----------
