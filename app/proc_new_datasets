#!/usr/bin/env python
#------------------------------

import os
import sys
from time import time, sleep

import PSCalib.RunProcUtils as rpu
from PSCalib.SubprocUtils import subproc, number_of_batch_jobs
#import PSCalib.SubprocUtils as spu
#import PSCalib.GlobalUtils as gu

#------------------------------

def subprocess_command(exp='xpptut15', run='0260', procname='pixel_status', qname='psnehq') :
    """Returns command like 'proc_control -e xpptut15 -r 0260 -p pixel_status -q psnehq -t 5'
    """
    if procname == 'pixel_status' :
        return 'proc_control -e %s -r %s -p %s -q %s -t 5' % (exp, str(run), procname, qname)
    else :
        return None

#------------------------------

def proc_exp_runs(exp_runs, procname='pixel_status', do_proc=False, qname='psnehq', njobs=5) :

    njobs_in_queue = number_of_batch_jobs(qname=qname)
    print '%d jobs found in queue %s' % (njobs_in_queue, qname)

    for i,(exp,run) in enumerate(exp_runs) :
        dsname = 'exp=%s:run=%s'%(exp, run.lstrip('0'))
        logname = rpu.log_file(exp, procname)
        print '%4d %s %4s %s %s'%(i+1, exp.ljust(10), run, dsname.ljust(22), logname)
        #--------------
        gap = 5*' '
        if do_proc and i<njobs and njobs_in_queue<njobs: 
            cmd = subprocess_command(exp, run, procname, qname)
            if cmd is None : raise IOError('ERROR: batch submission command is None...')

            print '%sStart subprocess: %s' % (gap, cmd)
            t0_sec = time()
            out, err = subproc(cmd, env=None, shell=False, do_wait=False)
            print '%sSubprocess starting time dt=%7.3f sec' % (gap, time()-t0_sec)
            #print 'subproc starting response:\n    out: %s\n    err: "%s"' % (out, err.strip('\n'))

            # mark dataset as processed in any case
            #==============================================
            rpu.append_log_file(exp, procname, [str(run),])
            #==============================================
        #--------------
    print '%d new runs found' % (len(exp_runs))

#------------------------------
#------------------------------

def proc_new_datasets(parser) :
    """Finds and processes new datasets.

       - Finds list of non-processed experimental runs
       - Submit jobs for specified number of subprocesses
    """

    (popts, pargs) = parser.parse_args()
    procname = popts.pro
    qname    = popts.que
    submit   = popts.sub
    njobs    = popts.njb
    mode     = popts.mod

    #tstamp = gu.str_tstamp('%Y-%m-%dT%H:%M:%S', time())

    #print 'default command: %s' % subprocess_command()
    #print_datasets_new_under_control(procname, add_to_log=False)

    exp_runs = rpu.exp_run_new(None, procname) if mode == 'ALL' else\
               rpu.exp_run_new_under_control(procname)
    proc_exp_runs(exp_runs, procname, submit, qname, njobs)

#------------------------------

def usage() : 
    return "\n%prog [-p <process-name> -q <queue-name> -m <mode> -s]"\
           "\n  Ex.1: %prog -p pixel_status -q psnehq -m ALL -s"\
           "\n  Ex.2: %prog     <--- lists non-processed datasets"\
           "\n  Ex.3: %prog -s  <--- submits non-processed datasets for processing"

#------------------------------

def input_option_parser() :

    from optparse import OptionParser
    d_pro = 'pixel_status'
    d_que = 'psnehq'
    d_njb = 2
    d_mod = 'LIST'
    d_sub = False

    h_pro = 'data processor name, default = %s' % d_pro
    h_que = 'batch queue name, default = %s' % d_que
    h_njb = 'maximal number of subprocesses/batch jobs to submit, default = %d' % d_njb
    h_mod = 'processing mode ALL or LIST, default = %s' % d_mod
    h_sub = 'start subrocess, default = %s' % d_sub

    parser = OptionParser(description='Finds non-processed datasets and begin processing.', usage=usage())
    parser.add_option('-p', '--pro', default=d_pro, action='store', type='string', help=h_pro)
    parser.add_option('-q', '--que', default=d_que, action='store', type='string', help=h_que)
    parser.add_option('-n', '--njb', default=d_njb, action='store', type='int',    help=h_njb)
    parser.add_option('-m', '--mod', default=d_mod, action='store', type='string', help=h_mod)
    parser.add_option('-s', '--sub', default=d_sub, action='store_true',           help=h_sub)
 
    return parser #, parser.parse_args()
  
#------------------------------

if __name__ == "__main__" :

    parser = input_option_parser()

    if len(sys.argv) == 1 : 
        parser.print_help()
        #sys.exit('WARNING: using ALL default parameters...')
        print 'WARNING: using ALL default parameters...'

    proc_new_datasets(parser)
    sys.exit(0)

#------------------------------
